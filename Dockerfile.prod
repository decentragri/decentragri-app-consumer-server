# Multi-stage build for production optimization
FROM golang:1.22-alpine AS builder

# Set build arguments for optimization
ARG CGO_ENABLED=0
ARG GOOS=linux
ARG GOARCH=amd64

# Install necessary packages
RUN apk add --no-cache git ca-certificates tzdata

# Set the working directory
WORKDIR /app

# Copy go mod files first for better layer caching
COPY go.mod go.sum ./

# Download dependencies
RUN go mod download && go mod verify

# Copy source code
COPY . .

# Build the application with optimizations
RUN go build \
    -ldflags='-w -s -extldflags "-static"' \
    -a -installsuffix cgo \
    -o main .

# Final stage - minimal runtime image
FROM scratch

# Copy certificates for HTTPS requests
COPY --from=builder /etc/ssl/certs/ca-certificates.crt /etc/ssl/certs/

# Copy timezone data
COPY --from=builder /usr/share/zoneinfo /usr/share/zoneinfo

# Copy the binary
COPY --from=builder /app/main /main

# Copy environment file (can be overridden)
COPY --from=builder /app/.env /.env

# Expose port
EXPOSE 9085

# Set default environment
ENV PORT=:9085

# Add health check
HEALTHCHECK --interval=30s --timeout=3s --start-period=5s --retries=3 \
    CMD ["/main", "--health-check"] || exit 1

# Run the application
ENTRYPOINT ["/main"]
